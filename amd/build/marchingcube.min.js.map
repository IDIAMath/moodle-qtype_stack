{"version":3,"sources":["../src/marchingcube.js"],"names":["xMin","xMax","yMin","yMax","zMin","zMax","func","c","resolution","xStep","yStep","zStep","finalTriangles","x","y","z","cube","MarchingCube","cubeCase","triangleTable","getIndex","i","triangle","length","push","getEdgePoint","v1","v2","v4","v8","v16","v32","v64","v128","edgePoints","Map","index","values","bit","edgeIndex","has","get","interp","Error","set","x1","x2","a","b","t"],"mappings":"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","sourcesContent":["/*\nCode from math3d-react\nhttps://github.com/ChristopherChudzicki/math3d-react/blob/master/client/src/utils/marchingCubes/index.js\n\n */\nimport {triangleTable} from \"./triangletable\";\n\nexport default function marchingCubes(\n    xMin, xMax, yMin, yMax, zMin, zMax,\n    func, c = 0, resolution = 128\n) {\n    const xStep = (xMax - xMin) / resolution\n    const yStep = (yMax - yMin) / resolution\n    const zStep = (zMax - zMin) / resolution\n    const finalTriangles = []\n    for (let x = xMin; x < xMax; x += xStep) {\n        for (let y = yMin; y < yMax; y += yStep) {\n            for (let z = zMin; z < zMax; z += zStep) {\n                // Same order as on http://paulbourke.net/geometry/polygonise/\n                const cube = new MarchingCube(x, y, z, xStep, yStep, zStep, func, c)\n                const cubeCase = triangleTable[cube.getIndex()]\n                for (let i = 0; i < cubeCase.length; i++) {\n                    const triangle = cubeCase[i]\n                    finalTriangles.push( [\n                        cube.getEdgePoint(triangle[0] ),\n                        cube.getEdgePoint(triangle[1] ),\n                        cube.getEdgePoint(triangle[2] )\n                    ] )\n                }\n            }\n        }\n    }\n    return finalTriangles\n}\n\nclass MarchingCube {\n\n    constructor(x, y, z, xStep, yStep, zStep, func, c) {\n        this.x = x\n        this.y = y\n        this.z = z\n        this.xStep = xStep\n        this.yStep = yStep\n        this.zStep = zStep\n        this.c = c\n        this.v1 = func(x, y, z)\n        this.v2 = func(x+xStep, y, z)\n        this.v4 = func(x+xStep, y, z+zStep)\n        this.v8 = func(x, y, z+zStep)\n        this.v16 = func(x, y+yStep, z)\n        this.v32 = func(x+xStep, y+yStep, z)\n        this.v64 = func(x+xStep, y+yStep, z+zStep)\n        this.v128 = func(x, y+yStep, z+zStep)\n        this.edgePoints = new Map()\n    }\n\n    /**\n     * getIndex\n     *\n     * Return the index into the 256 value lookup table\n     */\n    getIndex() {\n        let index = 0\n        const values = [\n            this.v1, this.v2, this.v4, this.v8,\n            this.v16, this.v32, this.v64, this.v128\n        ]\n        for (let i = 0; i < values.length; i++) {\n            const bit = 2**i\n            index += (values[i] > this.c) * bit\n        }\n        return index\n    }\n\n    getEdgePoint(edgeIndex) {\n        if (this.edgePoints.has(edgeIndex)) {\n            return this.edgePoints.get(edgeIndex)\n        }\n        let x, y, z\n        switch (edgeIndex) {\n\n            // See edge numbers here: http://paulbourke.net/geometry/polygonise/\n            case 0:\n                x = interp(this.x, this.x+this.xStep, this.v1, this.v2, this.c)\n                y = this.y\n                z = this.z\n                break\n            case 1:\n                x = this.x + this.xStep\n                y = this.y\n                z = interp(this.z, this.z+this.zStep, this.v2, this.v4, this.c)\n                break\n            case 2:\n                x = interp(this.x, this.x+this.xStep, this.v8, this.v4, this.c)\n                y = this.y\n                z = this.z + this.zStep\n                break\n            case 3:\n                x = this.x\n                y = this.y\n                z = interp(this.z, this.z+this.zStep, this.v1, this.v8, this.c)\n                break\n            case 4:\n                x = interp(this.x, this.x+this.xStep, this.v16, this.v32, this.c)\n                y = this.y + this.yStep\n                z = this.z\n                break\n            case 5:\n                x = this.x + this.xStep\n                y = this.y + this.yStep\n                z = interp(this.z, this.z+this.zStep, this.v32, this.v64, this.c)\n                break\n            case 6:\n                x = interp(this.x, this.x+this.xStep, this.v128, this.v64, this.c)\n                y = this.y + this.yStep\n                z = this.z + this.zStep\n                break\n            case 7:\n                x = this.x\n                y = this.y + this.yStep\n                z = interp(this.z, this.z+this.zStep, this.v16, this.v128, this.c)\n                break\n            case 8:\n                x = this.x\n                y = interp(this.y, this.y+this.yStep, this.v1, this.v16, this.c)\n                z = this.z\n                break\n            case 9:\n                x = this.x + this.xStep\n                y = interp(this.y, this.y+this.yStep, this.v2, this.v32, this.c)\n                z = this.z\n                break\n            case 10:\n                x = this.x + this.xStep\n                y = interp(this.y, this.y+this.yStep, this.v4, this.v64, this.c)\n                z = this.z + this.zStep\n                break\n            case 11:\n                x = this.x\n                y = interp(this.y, this.y+this.yStep, this.v8, this.v128, this.c)\n                z = this.z + this.zStep\n                break\n            default:\n                throw new Error('Edge index must be between 0 and 11')\n\n        }\n        this.edgePoints.set(edgeIndex, [x, y, z] )\n        return [x, y, z]\n    }\n\n}\n\nfunction interp(x1, x2, a, b, c) {\n    const t = (c - a) / (b - a)\n    return x1 * (1 - t) + x2 * t\n}"],"file":"marchingcube.min.js"}