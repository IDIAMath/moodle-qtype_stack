{"version":3,"file":"threedradio.min.js","sources":["../src/threedradio.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Class for handling question issue page.\n *\n * @module     qtype_stack/threedradio\n * @package    qtype_stack\n * @author     David Rise Knotten <david_knotten@hotmail.no>\n * @copyright  2021 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n import marchingCubes from \"./marchingcube\";\n\n // TODO refactor the code to allow the setup of ranges work with implicit graphs too,\n // as now an implicit graph has to hook into an existing canvas\n // for implicit, one option could be te iterate through the marchingcubes result and find\n // the largest/smallest values of z\n \n // TODO creategraphcolors function for implicit graphs (If possible)\n \n // Bruke {...stdvals, ...opts} men createzrange vil alti bli overwrita\n \n /**\n  *\n  * @type {{\"backgroundcolor\": string, ranges: string, graphcolorstyle: string, disableaxes: boolean}}\n  */\n const standardValues = {\n     'backgroundcolor': 'white',\n     'graphcolorstyle': 'lightblue',\n     'disableaxes': false,\n     'ranges': '-3;3;-3;3',\n     'resolution': 64,\n     'graphopacity': null,\n     'canvaswidth': '80%',\n     'canvasheight': null,\n };\n \n /**\n  *\n  * @param inputid The ID of the input sibling-node where the canvas will be placed\n  * @param exp The code element containing the expression\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n export const threedradio = (inputid, exp, options) => {\n \n     options = {\n         ...standardValues,\n         ...options,\n     }\n \n     if (exp == null || exp == '') return null\n     // Remove code tags\n     exp = exp.slice(6, exp.length-7);\n \n     // Get the option node where the input and canvas are placed\n     let element = document.getElementById(inputid).parentNode;\n     element.style.width = options['canvaswidth'] ?? '80%';\n     element.style.height = options['canvasheight'] ?? 0;\n     // If element height is 0, make the padding 50% of the parent elements height\n     if (element.style.height == '0px') {\n         element.style.paddingBottom = '50%';\n     }\n     element.style.margin = '10px';\n     element.style.display = 'inline-flex';\n \n     const waitfordependencies = () => {\n         if (typeof board == \"undefined\" || typeof Parser == \"undefined\") {\n             setTimeout(waitfordependencies, 100);\n         } else {\n             createCanvas(element, exp, options)\n         }\n     }\n     waitfordependencies();\n }\n \n const createMathBox = (element, expression, options = {}) => {\n     options = {\n         ...standardValues,\n         ...options,\n     }\n     console.log(element)\n \n     let canvasDiv = document.createElement('div')\n     canvasDiv.style.width = options['canvaswidth'] ?? '80%';\n     canvasDiv.style.height = options['canvasheight'] ?? '0';\n     canvasDiv.style.paddingBottom = '50%';\n     canvasDiv.style.margin = '10px';\n     canvasDiv.style.display = 'inline-flex';\n     element.appendChild(canvasDiv) \n \n     return createCanvas(canvasDiv, expression, options)\n }\n \n /**\n  * Creates a MathBox canvas under the element, the expression and options are optional and can be nulled\n  *\n  * @param element The element the mathbox canvas should be placed\n  * @param {String|null} expression The mathmatical expression to render\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n export const createCanvas = (element, expression, options = {}) => {\n     // Setup\n     //==================================================================================================================\n     // THe nxn resolution of the render\n     options = {\n         ...standardValues,\n         ...options,\n     }\n     var resolution = options.resolution;\n     let disableaxes = options.disableaxes;\n     let ranges = options.ranges.split(';').map(num => parseFloat(num));\n \n     var\txMin = parseFloat(ranges[0]), xMax = parseFloat(ranges[1]), yMin = parseFloat(ranges[2]), yMax = parseFloat(ranges[3]), zMin = -3, zMax = 3;\n     if( ranges.length > 4) {\n         zMin = parseFloat(ranges[4])\n         zMax = parseFloat(ranges[5])\n     }\n     //==================================================================================================================\n \n     // Creates a JXG board to plot a graph on\n     var board = JXG.JSXGraph.initBoard(divId, {\n         boundingbox: [-5, 5, 5, -5],\n         keepaspectratio: false,\n         axis: false,\n         grid: true\n     });\n \n \n     // Displays \n     var box = [-5,-5];\n     var view = board.create('view3d', [[-6,-3], [8,8], [box,box,box]], {\n         xPlaneRear: {visible: false},\n         yPlaneRear: {visible: false},\n     });\n \n     if (expression != null && expression != '') {\n         let zFunc = Parser.parse(expression).toJSFunction(['x','y']);\n         \n         if ( ranges.length <= 4) {\n             [zMin, zMax] = calculateZRange(zFunc, ranges, resolution).map(num => parseFloat(num))\n         }\n          \n \n         [zMin, zMax] = createGraph(expression, view, options);\n     }\n \n \n     // Sets the ranges of the render\n     view.set(\"range\", [[xMin, xMax], [zMin,zMax],[yMin, yMax]]);\n \n     // setting proxy:true allows interactive controls to override base position\n     var camera = board.camera( { proxy: true, position: [4,2,4] } );\n     // Display axes unless they are disabled\n     if (!disableaxes) {\n         var xAxis = view.axis( {axis: 1, width: 8, zIndex:1, detail: 40, color:\"red\"} );\n         var xScale = view.scale( {axis: 1, divide: 10, nice:true, zero:true} );\n         var xTicks = view.ticks( {width: 5, size: 15, color: \"red\", zBias:2} );\n         var xFormat = view.format( {digits: 2, font:\"Arial\", weight: \"bold\", style: \"normal\", source: xScale} );\n         var xTicksLabel = view.label( {color: \"red\", zIndex: 1, offset:[0,-20], points: xScale, text: xFormat} );\n \n         var yAxis = view.axis( {axis: 3, width: 8, detail: 40, color:\"green\"} );\n         var yScale = view.scale( {axis: 3, divide: 5, nice:true, zero:false} );\n         var yTicks = view.ticks( {width: 5, size: 15, color: \"green\", zBias:2} );\n         var yFormat = view.format( {digits: 2, font:\"Arial\", weight: \"bold\", style: \"normal\", source: yScale} );\n         var yTicksLabel = view.label( {color: \"green\", zIndex: 1, offset:[0,0], points: yScale, text: yFormat} );\n \n         var zAxis = view.axis( {axis: 2, width: 8, detail: 40, color:\"blue\"} );\n         var zScale = view.scale( {axis: 2, divide: 5, nice:true, zero:false} );\n         var zTicks = view.ticks( {width: 5, size: 15, color: \"blue\", zBias:2} );\n         var zFormat = view.format( {digits: 2, font:\"Arial\", weight: \"bold\", style: \"normal\", source: zScale} );\n         var zTicksLabel = view.label( {color: \"blue\", zIndex: 1, offset:[0,0], points: zScale, text: zFormat} );\n \n     }\n     view.grid( {axes:[1,3], width: 2, divideX: 20, divideY: 20, opacity:0.25} );\n \n \n     if(options.hasOwnProperty('backgroundcolor')) {\n         board.three.renderer.setClearColor(options['backgroundcolor']);\n     }\n \n     return [board, view];\n }\n \n /**\n  * Creates a graph from the input string\n  * If the string contains '=' or 'z' it will be assumed it is an implicit function\n  *\n  * @param {String} exp The equation/function as a string\n  * @param {Object} view The mathbox cartesian to add the graph to\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n const createGraph = (exp, view, options = {}) => {\n     if ((''+exp).includes('=') || (''+exp).includes('z')) {\n         console.log('Implicit graph');\n         return createImplicitGraph(exp,view,options);\n     } else if ((''+exp).includes('u') || (''+exp).includes('v')) {\n         console.log('Parametric graph')\n         let [x, y, z] = (''+exp).split(',')\n         return createParametricGraph(x, y, z, view, options)\n     } else {\n         console.log('Explicit graph');\n         return createExplicitGraph(exp, view, options);\n     }\n }\n \n /**\n  * Calculates the minima and maxima of Z\n  *\n  * @param zFunc function to evaluate\n  * @param {[number]} ranges array containing the pre-defined x and y ranges [xmin, xmax, ymin, ymax]\n  * @param {number} resolution the graph resolution\n  * @return {[number, number]} the minima and maxima of z\n  */\n const calculateZRange = (zFunc, ranges, resolution) => {\n     let [xMin, xMax, yMin, yMax] = ranges.map(num => parseFloat(num))\n     var xStep = (xMax - xMin) / resolution;\n     var yStep = (yMax - yMin) / resolution;\n     var zSmallest = zFunc(xMin, xMax);\n     var zBiggest  = zFunc(xMin, yMin);\n     for (var x = xMin; x <= xMax; x += xStep)\n     {\n         for (var y = yMin; y <= yMax; y += yStep)\n         {\n             var z = zFunc(x,y);\n             if (z < zSmallest) zSmallest = z;\n             if (z > zBiggest)  zBiggest  = z;\n         }\n     }\n     let zMin = zSmallest;\n     let zMax = zBiggest;\n     return [zMin, zMax]\n }\n \n /**\n  *\n  * @param {String} x function text of variables u and v to define x\n  * @param {String} y function text of variables u and v to define y\n  * @param {String} z function text of variables u and v to define z\n  * @param {Object} view The mathbox cartesian to add the graph to\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n const createParametricGraph = (x, y, z, view, options = {}) => {\n     options = {\n         ...standardValues,\n         ...options\n     }\n     let ranges = options.ranges.split(';').map(num => parseFloat(num));\n     let resolution = options.resolution\n \n     var\txMin = parseFloat(ranges[0]), xMax = parseFloat(ranges[1]), yMin = parseFloat(ranges[2]),\n         yMax = parseFloat(ranges[3]), zMin = -3, zMax = 3;\n \n     var xFunc = Parser.parse(x).toJSFunction(['u', 'v']);\n     var yFunc = Parser.parse(y).toJSFunction(['u', 'v']);\n     var zFunc = Parser.parse(z).toJSFunction(['u', 'v']);\n \n     // Find the smallest and largest values of z in the range unless overridden\n     if (ranges < 5) {\n         [zMin, zMax] = calculateZRange(zFunc, ranges, resolution).map(num => parseFloat(num));\n     } else {\n         [zMin, zMax] = ranges.slice(-2)\n     }\n \n     var graphColorFunc = createGraphColorFunc(zFunc, zMin, zMax, options);\n \n     var graphData = view.area({\n         axes: [1,3], channels: 3, width: resolution, height: resolution,\n         expr:   function (emit, u, v, i, j, t)\n         {\n             emit( xFunc(u,v), zFunc(u,v), yFunc(u,v) );\n         },\n     });\n \n     var graphColors = view.area({\n         rangeX: [xMin, xMax],\n         rangeY: [yMin, yMax],\n         expr: graphColorFunc,\n         axes: [1,3],\n         width:  resolution, height: resolution,\n         channels: 4, // RGBA\n     });\n \n     // create graph in two parts, because want solid and wireframe to be different colors\n     // shaded:false for a solid color (curve appearance provided by mesh)\n     // width: width of line mesh\n     // note: colors will mult. against color value, so set color to white (#FFFFFF) to let colors have complete control.\n     var graphViewSolid = view.surface({\n         points:graphData,\n         color:\"#FFFFFF\", shaded:false, fill:true, lineX:false, lineY:false, colors:graphColors, visible:true, width:0\n     });\n \n     var graphWireVisible = true;\n     var graphViewWire = view.surface({\n         points: graphData,\n         color:\"#000000\", shaded:false, fill:false, lineX:true, lineY:true, visible:graphWireVisible, width:1\n     });\n \n     return [zMin, zMax]\n }\n \n /**\n  * Subfunction of createGraph used when it is determined to be an implicit function\n  *\n  * @param {String} exp The equation/function as a string\n  * @param {Object} view The mathbox cartesian to add the graph to\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n const createImplicitGraph = (exp, view, options) => {\n     options = {\n         ...standardValues,\n         ...options\n     }\n     // Validate inputs and create the function\n     let resolution = options.resolution;\n     let ranges = options.ranges.split(';').map(num => parseFloat(num));\n     if (ranges.length < 5) {\n         ranges = [ranges[0] ?? -3, ranges[1] ?? 3, ranges[2] ?? -3, ranges[3] ?? 3, ranges[4] ?? -3, ranges[5] ?? 3]\n     }\n     let functions = (''+exp).replace('==', \"=\").split('=');\n     let lhs = Parser.parse(functions[0]);\n     let rhs = Parser.parse(functions[1]);\n     var frankenstein = lhs + '-' + rhs\n     var frankenfunc = Parser.parse(frankenstein).toJSFunction(['x', 'z', 'y'])\n \n     console.log(ranges)\n     // Create the datapoints and insure they aren't too high for mathbox to handle\n     let implicitTriangles = marchingCubes(ranges[0], ranges[1],\n         ranges[2], ranges[3], ranges[4], ranges[5],\n         frankenfunc, 0, resolution);\n     //As mentioned in math3d react, with too many samples it might break\n     var i = 1\n     while(implicitTriangles.length > 5400) {\n         console.log(implicitTriangles.length)\n         implicitTriangles = marchingCubes(ranges[0], ranges[1],\n             ranges[2], ranges[3], ranges[4], ranges[5],\n             frankenfunc,0, (resolution/(2*i)))\n         i++;\n     }\n \n     // Now we create the group and draw the graph\n     var implicitgroup = view.group({\n         visible: true,\n     })\n \n     var points = implicitgroup.array({\n         items: 3,\n         channels: 3,\n         data: implicitTriangles,\n         width: implicitTriangles.length,\n         live: false\n     });\n \n     var surf = implicitgroup.strip({\n         zOrder: 0,\n         color: \"#3090FF\",\n         opacity: 1,\n         zIndex: 0,\n         zBias: 0,\n         shaded: true,\n         fill:true,\n     });\n \n     return [ranges[4], ranges[5]]\n }\n \n /**\n  * Subfunction of createGraph used when it is determined to be an explicit function\n  *\n  * @param {String} exp The equation/function as a string\n  * @param {Object} view The mathbox cartesian to add the graph to\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n const createExplicitGraph = (exp, view, options = {}) => {\n     options = {\n         ...standardValues,\n         ...options\n     }\n     let resolution = options.resolution;\n     let ranges = options.ranges.split(';').map(num => parseFloat(num));\n \n     var functionText = exp;\n \n     var\txMin = parseFloat(ranges[0]), xMax = parseFloat(ranges[1]), yMin = parseFloat(ranges[2]),\n         yMax = parseFloat(ranges[3]), zMin = -3, zMax = 3;\n \n     var zFunc = Parser.parse( functionText ).toJSFunction( ['x','y'] );\n \n     // Find the smallest and largest values of z in the range unless the range is overridden\n     if (ranges.length < 5) {\n         [zMin, zMax] = calculateZRange(zFunc, ranges, resolution).map(num => parseFloat(num))\n     } else {\n         [zMin, zMax] = ranges.slice(-2)\n     }\n \n     var graphColorFunc = createGraphColorFunc(zFunc, zMin, zMax, options);\n \n     var graphData = view.area({\n         axes: [1,3], channels: 3, width: resolution, height: resolution,\n         expr:   function (emit, x, y, i, j, t)\n         {\n             emit( x, zFunc(x,y), y );\n         },\n     });\n \n     var graphColors = view.area({\n         expr: graphColorFunc,\n         axes: [1,3],\n         width:  resolution, height: resolution,\n         channels: 4, // RGBA\n     });\n \n     // create graph in two parts, because want solid and wireframe to be different colors\n     // shaded:false for a solid color (curve appearance provided by mesh)\n     // width: width of line mesh\n     // note: colors will mult. against color value, so set color to white (#FFFFFF) to let colors have complete control.\n     var graphViewSolid = view.surface({\n         points:graphData,\n         color:\"#FFFFFF\", shaded:false, fill:true, lineX:false, lineY:false, colors:graphColors, visible:true, width:0\n     });\n \n     var graphWireVisible = true;\n     var graphViewWire = view.surface({\n         points: graphData,\n         color:\"#000000\", shaded:false, fill:false, lineX:true, lineY:true, visible:graphWireVisible, width:1\n     });\n \n     return [zMin, zMax]\n }\n \n \n /**\n  * Generates color-style based on preset styles specified in the options parameter\n  * @param zFunc A mathematical function parsed to javascript, currently only two variables supported\n  * @param {number} zMin the z-value of the graphs lowest point\n  * @param {number} zMax the z-value of the graphs highest point\n  * @param {Object|null} options Any optional changes, @see {@link standardValues} to see the supported options\n  */\n export const createGraphColorFunc = (zFunc, zMin, zMax, options = {}) => {\n     let graphopacity = options.graphopacity;\n \n     var graphColorFunc, graphColorStyle = options['graphcolorstyle'];\n \n     if (graphColorStyle == 'grayscale') {\n         graphColorFunc = (emit, x, y, i, j, t) => {\n             var z = zFunc(x,y);\n             var percent = (z - zMin) / (zMax - zMin);\n             emit( percent, percent, percent, graphopacity ?? 1.0 );\n         }\n     } else if (graphColorStyle == 'rainbow') {\n         graphColorFunc = (emit, x, y, i, j, t) => {\n             var z = zFunc(x,y);\n             var percent = (z - 1.2 * zMin) / (zMax - 1.2 * zMin);\n             var color = new THREE.Color( 0xffffff );\n             color.setHSL( 1-percent, 1, 0.5 );\n             emit( color.r, color.g, color.b, graphopacity ?? 0.8 );\n         }\n     } else if (graphColorStyle == 'lightblue') {\n         graphColorFunc = (emit, x, y, i, j, t) => {\n             emit(0, 0.6, 0.9, graphopacity ?? 0.9);\n         };\n     } else if (graphColorStyle == 'solidblue') {\n         graphColorFunc = (emit, x, y, i, j, t) => {\n             emit( 0.5, 0.5, 1.0, graphopacity ?? 1.0 );\n         };\n     }\n     return graphColorFunc;\n }\n \n /**\n  * Creates references tied to the window object to allow non-module scripts to use its functions\n  */\n export const initMethods = () => {\n     var threed = {};\n     threed['createParametricGraph'] = createParametricGraph;\n     threed['createExplicitGraph'] = createExplicitGraph;\n     threed['createImplicitGraph'] = createImplicitGraph;\n \n     threed['createMathbox'] = createMathBox;\n     threed['createGraph'] = createGraph;\n     threed['createGraphColorFunc'] = createGraphColorFunc;\n     window['threed'] = threed;\n }\n "],"names":["standardValues","inputid","exp","options","slice","length","element","document","getElementById","parentNode","style","width","height","paddingBottom","margin","display","waitfordependencies","board","Parser","setTimeout","createCanvas","createMathBox","expression","console","log","canvasDiv","createElement","appendChild","resolution","disableaxes","ranges","split","map","num","parseFloat","xMin","xMax","yMin","yMax","zMin","zMax","JXG","JSXGraph","initBoard","divId","boundingbox","keepaspectratio","axis","grid","box","view","create","xPlaneRear","visible","yPlaneRear","zFunc","parse","toJSFunction","calculateZRange","createGraph","set","camera","proxy","position","zIndex","detail","color","xScale","scale","divide","nice","zero","xFormat","ticks","size","zBias","format","digits","font","weight","source","yScale","label","offset","points","text","yFormat","zScale","zFormat","axes","divideX","divideY","opacity","hasOwnProperty","three","renderer","setClearColor","includes","createImplicitGraph","x","y","z","createParametricGraph","createExplicitGraph","xStep","yStep","zSmallest","zBiggest","xFunc","yFunc","graphColorFunc","createGraphColorFunc","graphData","area","channels","expr","emit","u","v","i","j","t","graphColors","rangeX","rangeY","graphWireVisible","surface","shaded","fill","lineX","lineY","colors","functions","replace","frankenstein","frankenfunc","implicitTriangles","implicitgroup","group","array","items","data","live","strip","zOrder","functionText","graphopacity","graphColorStyle","percent","THREE","Color","setHSL","r","g","b","threed","window"],"mappings":"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"}